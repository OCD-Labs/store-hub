swagger: "2.0"
info:
  title: "StoreHub API"
  description: "
  Rediscovery e-commerce et blockchainâ€”server."
  version: "1.0.0"
# host: "localhost:6780"
host: "store-hub-djxu.onrender.com"
basePath: "/api/v1"
schemes:
  - "https"
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /users/{id}/stores:
    post:
      summary: Create a new store
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          type: integer
          minimum: 1
        - name: requestBody
          in: body
          description: Store details
          required: true
          schema:
            $ref: "#/definitions/createStoreRequestBody"
      responses:
        201:
          description: Store created successfully
          schema:
            $ref: "#/definitions/storeResponse"
        400:
          description: Invalid request or user ID
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized request
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: Conflict request
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
    get:
      summary: Retrieve stores owned by a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the user
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      stores:
                        type: array
                        items:
                          $ref: '#/definitions/store'
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
  /users/{user_id}/stores/{store_id}/items:
    post:
      summary: Add a new item to a store
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          type: integer
          minimum: 1
        - name: store_id
          in: path
          description: Store ID
          required: true
          type: integer
          minimum: 1
        - name: requestBody
          in: body
          description: Item details
          required: true
          schema:
            $ref: "#/definitions/addStoreItemRequestBody"
      responses:
        201:
          description: Item added successfully
          schema:
            $ref: "#/definitions/addStoreItemResponse"
        400:
          description: Invalid request or user/store ID
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized request
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden request
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: Conflict request
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
    get:
      summary: List owned store items
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the user
        - in: path
          name: store_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the store
        - in: query
          name: item_name
          schema:
            type: string
          description: The name of the item
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            maximum: 10000000
          description: The page number
        - in: query
          name: page_size
          schema:
            type: integer
            minimum: 1
            maximum: 20
          description: The number of items per page
        - in: query
          name: sort
          schema:
            type: string
          description: The sorting criteria for items (e.g., 'id', 'category', 'price', 'name', '-id', '-category', '-name', '-price').
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/definitions/storeItem'
                      metadata:
                        $ref: '#/definitions/pagination'
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
  /users/{user_id}/stores/{store_id}/items/{item_id}: 
    patch:
      summary: Update store item
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the user
        - in: path
          name: store_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the store
        - in: path
          name: item_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the item
        - name: requestBody
          in: body
          required: true
          description: New Item details
          schema:
            $ref: '#/definitions/updateStoreItemsRequestBody'
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      item:
                        $ref: '#/definitions/storeItem'
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
    delete:
      summary: Delete a store item
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the user
        - in: path
          name: store_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the store
        - in: path
          name: item_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the item
      responses:
        204:
          description: No Content
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
  /users/{user_id}/store/{store_id}/owners:
    post:
      summary: Add a new store owner
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the user
        - in: path
          name: store_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the store
        - name: requestBody
          in: body
          description: New Owner details
          required: true
          schema:
            type: object
            properties:
              account_id:
                type: string
                minLength: 2
                maxLength: 64
      responses:
        201:
          description: Created
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      owner:
                        $ref: '#/definitions/storeOwner'
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: Conflict
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
    delete:
      summary: Remove a user from store ownership
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the user
        - in: path
          name: store_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the store
        - name: requestBody
          in: body
          description: Store details
          required: true
          schema:
            type: object
            properties:
              account_id:
                type: string
                minLength: 2
                maxLength: 64
            required:
              - account_id
      responses:
        204:
          description: No Content
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
  /stores:
    get:
      summary: Discover stores
      parameters:
        - in: query
          name: store_name
          schema:
            type: string
          description: Filter stores by name
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            maximum: 10000000
          description: The page number for pagination
        - in: query
          name: page_size
          schema:
            type: integer
            minimum: 1
            maximum: 20
          description: The number of stores to include per page
        - in: query
          name: sort
          schema:
            type: string
          description: The sorting criteria for the stores (e.g., 'id', 'category', 'name', '-id', '-category', '-name'). Missing support for 'category' and '-category' for now.
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      stores:
                        type: array
                        items:
                          $ref: '#/definitions/store'
                      metadata:
                        $ref: '#/definitions/pagination'
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /stores/{id}/items:
    get:
      summary: List store items
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            minimum: 1
          description: The ID of the store
        - in: query
          name: item_name
          schema:
            type: string
          description: Filter items by name
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            maximum: 10000000
          description: The page number for pagination
        - in: query
          name: page_size
          schema:
            type: integer
            minimum: 1
            maximum: 20
          description: The number of items to include per page
        - in: query
          name: sort
          schema:
            type: string
          description: The sorting criteria for the items (e.g 'id', 'category', 'price', 'name', '-id', '-category', '-name', '-price')
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/definitions/storeItem'
                      metadata:
                        $ref: '#/definitions/pagination'
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users:
    post:
      summary: Create a new user
      parameters:
        - name: requestBody
          in: body
          required: true
          description: User details
          schema:
            $ref: '#/definitions/createUserRequest'
      responses:
        201:
          description: Created
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      user:
                        $ref: '#/definitions/userResponse'
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth/logout:
    post:
      summary: Logout a user
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: Bad request
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
  /auth/login:
    post:
      summary: Login a user
      parameters:
        - name: requestBody
          in: body
          description: User credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
                minLength: 8
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/userResponse"
        400:
          description: Bad request
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          description: User's ID
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/userResponse"
        400:
          description: Bad request
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
  /stores/{store_id}/items/{item_id}/buy:
    patch:
      summary: Buy an item from a store
      description: Decreases the supply quantity of a specific item in a specific store by one If the item supply quantity is greater than 1.
      parameters:
        - in: path
          name: store_id
          required: true
          type: integer
          description: ID of the store
          minimum: 1
        - in: path
          name: item_id
          required: true
          type: integer
          description: ID of the item
          minimum: 1
      responses:
        200:
          description: Item successfully bought
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              data:
                type: object
                properties:
                  message:
                    type: string
                    example: item sold
                  result:
                    type: object
                    properties:
                      new_item:
                        $ref: "#/definitions/storeItem"
        400:
          description: Invalid store ID or item ID provided
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Item not found or item no longer in stock
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Failed to fetch item details or failed to update item
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []

  /stores/{store_id}/items/{item_id}:
    get:
      summary: Retrieve an item from a store
      description: Fetches the details of a specific item in a specific store If the item does exist
      parameters:
        - in: path
          name: store_id
          required: true
          type: integer
          description: ID of the store
          minimum: 1
        - in: path
          name: item_id
          required: true
          type: integer
          description: ID of the item
          minimum: 1
      responses:
        200:
          description: Item successfully retrieved
          schema:
            type: object
            properties:
              status:
                type: string
                example: success
              data:
                type: object
                properties:
                  message:
                    type: string
                    example: found item
                  result:
                    type: object
                    properties:
                      item:
                        $ref: "#/definitions/storeItem"
        400:
          description: Invalid store ID or item ID provided
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Item not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Failed to fetch item details
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users/{user_id}/stores/{store_id}:
    patch:
      summary: Update store profile
      parameters:
        - name: user_id
          in: path
          description: ID of the user who owns the store
          required: true
          type: integer
        - name: store_id
          in: path
          description: ID of the store to be updated
          required: true
          type: integer
        - name: requestBody
          in: body
          description: Store profile update data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              profile_image_url:
                type: string
              category:
                type: string
              tags:
                type: array
                items:
                  type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    $ref: '#/definitions/store'
        400:
          description: Invalid user ID or store ID provided
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Item not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized request
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden request
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Failed to fetch item details
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
  /seller/orders:
    post:
      summary: Create a new order
      parameters:
        - name: requestBody
          in: body
          description: Details of the order to be created.
          required: true
          schema:
            $ref: "#/definitions/createOrderRequestBody"
      responses:
        201:
          description: Created
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      order:
                        $ref: '#/definitions/orderResponse'
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: Conflict
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
    get:
      summary: List seller orders
      parameters:
        - in: query
          name: item_name
          description: Item name to search.
          schema:
            type: string
        - in: query
          name: created_at_start
          description: The date to start the search from. (e.g 2023-08-09)
          schema:
            type: string
            format: date-time
        - in: query
          name: created_at_end
          description: The date to end the search at. (e.g 2023-08-10)
          schema:
            type: string
            format: date-time
        - in: query
          name: payment_channel
          description: Search orders by payment channels like NEAR, debit card, PayPal etc
          schema:
            type: string
        - in: query
          name: delivery_status
          description: Search orders by what status they are in. {"PENDING", "PROCESSING", "SHIPPED", "DELIVERED", "CANCELLED", "RETURNED"}
          schema:
            type: string
        - in: query
          name: page
          description: The page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            maximum: 10000000
        - in: query
          name: page_size
          description: The number of orders to include per page
          schema:
            type: integer
            minimum: 1
            default: 15
            maximum: 20
        - in: query
          name: sort
          description: The sorting criteria for the order (e.g "-id", "-item_name", "-created_at", "id", "item_name", "created_at")
          schema:
            type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      order:
                        type: array
                        items:
                          $ref: '#/definitions/orderResponse'
                      metadata:
                        $ref: '#/definitions/pagination'
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
  /seller/orders/{order_id}:
    get:
      summary: Get seller order by ID
      parameters:
        - in: path
          name: order_id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      order:
                        $ref: '#/definitions/orderResponse'
        404:
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
    patch:
      summary: Update seller order by ID
      parameters:
        - in: path
          name: order_id
          description: The order ID
          schema:
            type: integer
            format: int64
          required: true
        - in: body
          name: requestBody
          description: |
            The request body containing update details for an order with the 'order_id'.
            'delivered_on' is required if 'delivery_status' is set to 'DELIVERED', and
            if 'delivery_status' is set to 'DELIVERED', 'delivered_on' must be provided.
          required: true
          schema:
            type: object
            properties:
              delivered_on:
                type: string
                format: date-time
                default: "0001-01-01T00:00:00Z"
              delivery_status:
                type: string
              expected_delivery_date:
                type: string
                format: date-time
                default: "0001-01-01T00:00:00Z"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      order:
                        $ref: '#/definitions/orderResponse'
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []

  /users/{user_id}/stores/{store_id}/sales:
    get:
      summary: List all sales for a user's store
      parameters:
        - name: user_id
          in: path
          description: The Id of the store owner
          required: true
          schema:
            type: integer
        - name: store_id
          description: The Id of the store
          in: path
          required: true
          schema:
            type: integer
        - name: item_price_start
          in: query
          description: The start price of the item to start the filter from.
          schema:
            type: string
        - name: item_price_end
          in: query
          description: The end price of the item to stop the filter at.
          schema:
            type: string
        - name: item_name
          in: query
          description: The name of item to filter for.
          schema:
            type: string
        - name: customer_account_id
          in: query
          description: The NEAR account_id of the customer to filter for.
          schema:
            type: string
        - name: delivery_date_start
          in: query
          description: The delivery date to start the filter from.
          schema:
            type: string
            format: date-time
        - name: delivery_date_end
          in: query
          description: The delivery date to end the filter from.
          schema:
            type: string
            format: date-time
        - name: order_date_start
          in: query
          description: The order date to start the filter from.
          schema:
            type: string
            format: date-time
        - name: order_date_end
          in: query
          description: The order date to end the filter from.
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          description: The page number for pagination
          schema:
            type: integer
        - name: page_size
          in: query
          description: The number of stores to include per page
          schema:
            type: integer
        - name: sort
          in: query
          description: The sorting criteria for the stores (e.g., 'id', 'item_name', 'delivery_date', 'order_date', 'price', '-id', '-item_name', '-delivery_date', 'order_date', 'price').
          schema:
            type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      sales:
                        type: array
                        items:
                          $ref: '#/definitions/Sale'
                      metadata:
                        $ref: '#/definitions/pagination'
        400:
          description: Bad request
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []

  /users/{user_id}/stores/{store_id}/sales/{sale_id}:
    get:
      summary: Get details of a sale for a user's store
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: store_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: sale_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Ok
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  message:
                    type: string
                  result:
                    type: object
                    properties:
                      sale:
                        $ref: '#/definitions/Sale'
        400:
          description: Bad request
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Sale not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: Internal server error
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []

definitions:
  createStoreRequestBody:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      profile_image_url:
        type: string
      category:
        type: string
      store_account_id:
        type: string
    required:
      - name
      - description
      - profile_image_url
      - category
      - store_account_id

  storeResponse:
    type: object
    properties:
      status:
        type: string
      data:
        type: object
        properties:
          message:
            type: string
          result:
            $ref: "#/definitions/storeResult"

  storeResult:
    type: object
    properties:
      store:
        $ref: "#/definitions/store"
      store_owners:
        type: array
        items:
          $ref: "#/definitions/storeOwner"

  store:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      profile_image_url:
        type: string
      is_verified:
        type: boolean
      category:
        type: string
      is_frozen:
        type: boolean
      created_at:
        type: string
        format: date-time

  storeOwner:
    type: object
    properties:
      user_id:
        type: integer
      store_id:
        type: integer
      access_level:
        type: integer
      added_at:
        type: string
        format: date-time
  
  ErrorResponse:
    type: object
    properties:
      status:
        type: string
      error:
        type: object
        properties:
          message:
            type: string

  addStoreItemRequestBody:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      price:
        type: string
      image_urls:
        type: array
        items:
          type: string
      cover_img_url:
        type: string
      category:
        type: string
      discount_percentage:
        type: string
      supply_quantity:
        type: integer
    required:
      - name
      - description
      - price
      - image_urls
      - category
      - discount_percentage
      - supply_quantity
  
  addStoreItemResponse:
    type: object
    properties:
      status:
        type: string
      data:
        type: object
        properties:
          message:
            type: string
          result:
            $ref: "#/definitions/addStoreItemResult"

  addStoreItemResult:
    type: object
    properties:
      item:
        $ref: "#/definitions/storeItem"

  storeItem:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      price:
        type: string
      store_id:
        type: integer
      image_urls:
        type: array
        items:
          type: string
      cover_img_url:
        type: string
      currency:
        type: string
      category:
        type: string
      discount_percentage:
        type: string
      supply_quantity:
        type: integer
      extra:
        type: object
      is_frozen:
        type: boolean
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time

  updateStoreItemsRequestBody:
    type: object
    properties:
      name:
        type: string
        minLength: 2
      description:
        type: string
        minLength: 2
      price:
        type: string
      image_urls:
        type: array
        items:
          type: string
      cover_img_url:
        type: string
      category:
        type: string
      discount_percentage:
        type: string
      supply_quantity:
        type: integer

  pagination:
    type: object
    properties:
      current_page:
        type: integer
      page_size:
        type: integer
      first_page:
        type: integer
      last_page:
        type: integer
      total_records:
        type: integer

  createUserRequest:
    type: object
    properties:
      first_name:
        type: string
        minLength: 1
      last_name:
        type: string
        minLength: 1
      password:
        type: string
        minLength: 8
      email:
        type: string
        format: email
      account_id:
        type: string
        oneOf:
          - minLength: 2
          - maxLength: 64
      profile_image_url:
        type: string
    required:
      - first_name
      - last_name
      - password
      - email
      - account_id
    additionalProperties: false

  userResponse:
    type: object
    properties:
      user_id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string
      account_id:
        type: string
      email:
        type: string
      profil_image_url:
        type: string
      created_at:
        type: string
        format: date-time
      password_changed_at:
        type: string
        format: date-time
      is_active:
        type: boolean
      is_email_verified:
        type: boolean
  
  createOrderRequestBody:
    type: object
    properties:
      item_id:
        type: integer
        minimum: 1
      order_quantity:
        type: integer
        minimum: 1
      seller_id:
        type: integer
        minimum: 1
      store_id:
        type: integer
        minimum: 1
      delivery_fee:
        type: string
      payment_channel:
        type: string
        enum:
          - NEAR
          - Debit Card
          - PayPal
          - Credit Card
      payment_method:
        type: string
        enum:
          - Instant Pay
          - Pay on Delivery

  orderResponse:
    type: object
    properties:
      id:
        type: integer
      delivery_status:
        type: string
      delivered_on:
        type: string
        format: date-time
      expected_delivery_date:
        type: string
        format: date-time
      item_id:
        type: integer
      order_quantity:
        type: integer
      buyer_id:
        type: integer
      seller_id:
        type: integer
      store_id:
        type: integer
      delivery_fee:
        type: string
      payment_channel:
        type: string
      payment_method:
        type: string
      created_at:
        type: string
        format: date-time

  Sale:
    type: object
    properties:
      sale_id:
        type: integer
      store_id:
        type: integer
      created_at:
        type: string
        format: date-time
      item_id:
        type: integer
      item_name:
        type: string
      item_price:
        type: string
      customer_id:
        type: integer
      customer_account_id:
        type: string
      order_id:
        type: integer
      order_date:
        type: string
        format: date-time
      delivery_date:
        type: string
        format: date-time
