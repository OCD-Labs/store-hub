// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: order.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  delivery_status,
  item_id,
  order_quantity,
  store_id,
  buyer_id, -- update by checking parameters that are missing.
  delivery_fee,
  payment_channel,
  payment_method
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, delivery_status, delivered_date, expected_delivery_date, item_id, order_quantity, buyer_id, store_id, delivery_fee, payment_channel, payment_method, created_at
`

type CreateOrderParams struct {
	DeliveryStatus string `json:"delivery_status"`
	ItemID         int64  `json:"item_id"`
	OrderQuantity  int32  `json:"order_quantity"`
	StoreID        int64  `json:"store_id"`
	BuyerID        int64  `json:"buyer_id"`
	DeliveryFee    string `json:"delivery_fee"`
	PaymentChannel string `json:"payment_channel"`
	PaymentMethod  string `json:"payment_method"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.DeliveryStatus,
		arg.ItemID,
		arg.OrderQuantity,
		arg.StoreID,
		arg.BuyerID,
		arg.DeliveryFee,
		arg.PaymentChannel,
		arg.PaymentMethod,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.DeliveryStatus,
		&i.DeliveredDate,
		&i.ExpectedDeliveryDate,
		&i.ItemID,
		&i.OrderQuantity,
		&i.BuyerID,
		&i.StoreID,
		&i.DeliveryFee,
		&i.PaymentChannel,
		&i.PaymentMethod,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderForSeller = `-- name: GetOrderForSeller :one
SELECT
  o.id AS order_id,
  o.delivery_status,
  o.delivered_date,
  o.item_id,
  o.order_quantity,
  o.buyer_id,
  o.store_id,
  o.delivery_fee,
  o.payment_channel,
  o.payment_method,
  i.name AS item_name,
  i.description AS item_description,
  i.price,
  i.cover_img_url,
  i.discount_percentage,
  u.first_name,
  u.last_name,
  u.email,
  u.account_id
FROM
  orders o
JOIN
  items i ON o.item_id = i.id
JOIN
  users u ON o.buyer_id = u.id
WHERE 
    o.id = $1
`

type GetOrderForSellerRow struct {
	OrderID            int64     `json:"order_id"`
	DeliveryStatus     string    `json:"delivery_status"`
	DeliveredDate      time.Time `json:"delivered_date"`
	ItemID             int64     `json:"item_id"`
	OrderQuantity      int32     `json:"order_quantity"`
	BuyerID            int64     `json:"buyer_id"`
	StoreID            int64     `json:"store_id"`
	DeliveryFee        string    `json:"delivery_fee"`
	PaymentChannel     string    `json:"payment_channel"`
	PaymentMethod      string    `json:"payment_method"`
	ItemName           string    `json:"item_name"`
	ItemDescription    string    `json:"item_description"`
	Price              string    `json:"price"`
	CoverImgUrl        string    `json:"cover_img_url"`
	DiscountPercentage string    `json:"discount_percentage"`
	FirstName          string    `json:"first_name"`
	LastName           string    `json:"last_name"`
	Email              string    `json:"email"`
	AccountID          string    `json:"account_id"`
}

func (q *Queries) GetOrderForSeller(ctx context.Context, id int64) (GetOrderForSellerRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderForSeller, id)
	var i GetOrderForSellerRow
	err := row.Scan(
		&i.OrderID,
		&i.DeliveryStatus,
		&i.DeliveredDate,
		&i.ItemID,
		&i.OrderQuantity,
		&i.BuyerID,
		&i.StoreID,
		&i.DeliveryFee,
		&i.PaymentChannel,
		&i.PaymentMethod,
		&i.ItemName,
		&i.ItemDescription,
		&i.Price,
		&i.CoverImgUrl,
		&i.DiscountPercentage,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AccountID,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET
  delivered_date = COALESCE($1, delivered_date),
  delivery_status = COALESCE($2, delivery_status),
  expected_delivery_date = COALESCE($3, expected_delivery_date)
WHERE
  id = $4
RETURNING id, delivery_status, delivered_date, expected_delivery_date, item_id, order_quantity, buyer_id, store_id, delivery_fee, payment_channel, payment_method, created_at
`

type UpdateOrderParams struct {
	DeliveredDate        sql.NullTime   `json:"delivered_date"`
	DeliveryStatus       sql.NullString `json:"delivery_status"`
	ExpectedDeliveryDate sql.NullTime   `json:"expected_delivery_date"`
	OrderID              int64          `json:"order_id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder,
		arg.DeliveredDate,
		arg.DeliveryStatus,
		arg.ExpectedDeliveryDate,
		arg.OrderID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.DeliveryStatus,
		&i.DeliveredDate,
		&i.ExpectedDeliveryDate,
		&i.ItemID,
		&i.OrderQuantity,
		&i.BuyerID,
		&i.StoreID,
		&i.DeliveryFee,
		&i.PaymentChannel,
		&i.PaymentMethod,
		&i.CreatedAt,
	)
	return i, err
}
