// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: sale.sql

package db

import (
	"context"
)

const createSale = `-- name: CreateSale :one
INSERT INTO sales (
  store_id,
  item_id,
  customer_id,
  seller_id,
  order_id
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, store_id, item_id, customer_id, seller_id, order_id, created_at
`

type CreateSaleParams struct {
	StoreID    int64 `json:"store_id"`
	ItemID     int64 `json:"item_id"`
	CustomerID int64 `json:"customer_id"`
	SellerID   int64 `json:"seller_id"`
	OrderID    int64 `json:"order_id"`
}

func (q *Queries) CreateSale(ctx context.Context, arg CreateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, createSale,
		arg.StoreID,
		arg.ItemID,
		arg.CustomerID,
		arg.SellerID,
		arg.OrderID,
	)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.ItemID,
		&i.CustomerID,
		&i.SellerID,
		&i.OrderID,
		&i.CreatedAt,
	)
	return i, err
}

const getSale = `-- name: GetSale :one
SELECT id, store_id, item_id, customer_id, seller_id, order_id, created_at FROM sales
WHERE id = $1 AND store_id = $2
`

type GetSaleParams struct {
	SaleID  int64 `json:"sale_id"`
	StoreID int64 `json:"store_id"`
}

func (q *Queries) GetSale(ctx context.Context, arg GetSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, getSale, arg.SaleID, arg.StoreID)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.ItemID,
		&i.CustomerID,
		&i.SellerID,
		&i.OrderID,
		&i.CreatedAt,
	)
	return i, err
}
