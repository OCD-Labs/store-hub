// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: sale.sql

package db

import (
	"context"
	"time"
)

const createSale = `-- name: CreateSale :one
INSERT INTO sales (
  store_id,
  item_id,
  customer_id,
  seller_id,
  order_id
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, store_id, item_id, customer_id, seller_id, order_id, created_at
`

type CreateSaleParams struct {
	StoreID    int64 `json:"store_id"`
	ItemID     int64 `json:"item_id"`
	CustomerID int64 `json:"customer_id"`
	SellerID   int64 `json:"seller_id"`
	OrderID    int64 `json:"order_id"`
}

func (q *Queries) CreateSale(ctx context.Context, arg CreateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, createSale,
		arg.StoreID,
		arg.ItemID,
		arg.CustomerID,
		arg.SellerID,
		arg.OrderID,
	)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.ItemID,
		&i.CustomerID,
		&i.SellerID,
		&i.OrderID,
		&i.CreatedAt,
	)
	return i, err
}

const getSale = `-- name: GetSale :one
SELECT 
  s.id AS sale_id,
  s.store_id,
  s.created_at,
  s.item_id,
  i.name AS item_name,
  i.price AS item_price,
  i.cover_img_url AS item_cover_img_url,
  s.customer_id,
  u.account_id AS customer_account_id,
  s.order_id,
  o.created_at AS order_date,
  o.delivered_on AS delivery_date
FROM 
  sales s
JOIN
  users u ON s.customer_id = u.id
JOIN
  items i ON s.item_id = i.id
JOIN 
  orders o ON s.order_id = o.id
WHERE 
  s.id = $1
  AND s.store_id = $2
  AND s.seller_id = $3
`

type GetSaleParams struct {
	SaleID   int64 `json:"sale_id"`
	StoreID  int64 `json:"store_id"`
	SellerID int64 `json:"seller_id"`
}

type GetSaleRow struct {
	SaleID            int64     `json:"sale_id"`
	StoreID           int64     `json:"store_id"`
	CreatedAt         time.Time `json:"created_at"`
	ItemID            int64     `json:"item_id"`
	ItemName          string    `json:"item_name"`
	ItemPrice         string    `json:"item_price"`
	ItemCoverImgUrl   string    `json:"item_cover_img_url"`
	CustomerID        int64     `json:"customer_id"`
	CustomerAccountID string    `json:"customer_account_id"`
	OrderID           int64     `json:"order_id"`
	OrderDate         time.Time `json:"order_date"`
	DeliveryDate      time.Time `json:"delivery_date"`
}

func (q *Queries) GetSale(ctx context.Context, arg GetSaleParams) (GetSaleRow, error) {
	row := q.db.QueryRowContext(ctx, getSale, arg.SaleID, arg.StoreID, arg.SellerID)
	var i GetSaleRow
	err := row.Scan(
		&i.SaleID,
		&i.StoreID,
		&i.CreatedAt,
		&i.ItemID,
		&i.ItemName,
		&i.ItemPrice,
		&i.ItemCoverImgUrl,
		&i.CustomerID,
		&i.CustomerAccountID,
		&i.OrderID,
		&i.OrderDate,
		&i.DeliveryDate,
	)
	return i, err
}

const reduceSaleCount = `-- name: ReduceSaleCount :exec
SELECT reduce_sale_count($1, $2)
`

type ReduceSaleCountParams struct {
	StoreID int64 `json:"store_id"`
	ItemID  int64 `json:"item_id"`
}

func (q *Queries) ReduceSaleCount(ctx context.Context, arg ReduceSaleCountParams) error {
	_, err := q.db.ExecContext(ctx, reduceSaleCount, arg.StoreID, arg.ItemID)
	return err
}

const saleExists = `-- name: SaleExists :one
SELECT EXISTS (
    SELECT 1
    FROM sales
    WHERE order_id = $1
)
`

func (q *Queries) SaleExists(ctx context.Context, orderID int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, saleExists, orderID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
