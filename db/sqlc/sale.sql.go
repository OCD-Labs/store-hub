// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sale.sql

package db

import (
	"context"
	"time"
)

const createSale = `-- name: CreateSale :one
SELECT id, store_id, item_id, customer_id, seller_id, order_id, created_at FROM create_sale(
  $1,
  $2,
  $3,
  $4,
  $5
)
`

type CreateSaleParams struct {
	StoreID    int64 `json:"store_id"`
	ItemID     int64 `json:"item_id"`
	CustomerID int64 `json:"customer_id"`
	SellerID   int64 `json:"seller_id"`
	OrderID    int64 `json:"order_id"`
}

func (q *Queries) CreateSale(ctx context.Context, arg CreateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, createSale,
		arg.StoreID,
		arg.ItemID,
		arg.CustomerID,
		arg.SellerID,
		arg.OrderID,
	)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.ItemID,
		&i.CustomerID,
		&i.SellerID,
		&i.OrderID,
		&i.CreatedAt,
	)
	return i, err
}

const createSaleFn = `-- name: CreateSaleFn :one
INSERT INTO sales (
  store_id,
  item_id,
  customer_id,
  seller_id,
  order_id
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, store_id, item_id, customer_id, seller_id, order_id, created_at
`

type CreateSaleFnParams struct {
	StoreID    int64 `json:"store_id"`
	ItemID     int64 `json:"item_id"`
	CustomerID int64 `json:"customer_id"`
	SellerID   int64 `json:"seller_id"`
	OrderID    int64 `json:"order_id"`
}

func (q *Queries) CreateSaleFn(ctx context.Context, arg CreateSaleFnParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, createSaleFn,
		arg.StoreID,
		arg.ItemID,
		arg.CustomerID,
		arg.SellerID,
		arg.OrderID,
	)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.ItemID,
		&i.CustomerID,
		&i.SellerID,
		&i.OrderID,
		&i.CreatedAt,
	)
	return i, err
}

const getSale = `-- name: GetSale :one
SELECT 
  s.id AS sale_id,
  s.store_id,
  s.created_at,
  s.item_id,
  i.name AS item_name,
  i.price AS item_price,
  i.cover_img_url AS item_cover_img_url,
  s.customer_id,
  u.account_id AS customer_account_id,
  s.order_id,
  o.created_at AS order_date,
  o.delivered_on AS delivery_date
FROM 
  sales s
JOIN
  users u ON s.customer_id = u.id
JOIN
  items i ON s.item_id = i.id
JOIN 
  orders o ON s.order_id = o.id
WHERE 
  s.id = $1
  AND s.store_id = $2
  AND s.seller_id = $3
`

type GetSaleParams struct {
	SaleID   int64 `json:"sale_id"`
	StoreID  int64 `json:"store_id"`
	SellerID int64 `json:"seller_id"`
}

type GetSaleRow struct {
	SaleID            int64     `json:"sale_id"`
	StoreID           int64     `json:"store_id"`
	CreatedAt         time.Time `json:"created_at"`
	ItemID            int64     `json:"item_id"`
	ItemName          string    `json:"item_name"`
	ItemPrice         string    `json:"item_price"`
	ItemCoverImgUrl   string    `json:"item_cover_img_url"`
	CustomerID        int64     `json:"customer_id"`
	CustomerAccountID string    `json:"customer_account_id"`
	OrderID           int64     `json:"order_id"`
	OrderDate         time.Time `json:"order_date"`
	DeliveryDate      time.Time `json:"delivery_date"`
}

func (q *Queries) GetSale(ctx context.Context, arg GetSaleParams) (GetSaleRow, error) {
	row := q.db.QueryRowContext(ctx, getSale, arg.SaleID, arg.StoreID, arg.SellerID)
	var i GetSaleRow
	err := row.Scan(
		&i.SaleID,
		&i.StoreID,
		&i.CreatedAt,
		&i.ItemID,
		&i.ItemName,
		&i.ItemPrice,
		&i.ItemCoverImgUrl,
		&i.CustomerID,
		&i.CustomerAccountID,
		&i.OrderID,
		&i.OrderDate,
		&i.DeliveryDate,
	)
	return i, err
}

const getStoreMetrics = `-- name: GetStoreMetrics :one
WITH TodaySales AS (
    SELECT 
        SUM(o.order_quantity) AS today_sales_count,
        SUM(o.order_quantity * i.price) AS today_sales_revenue    FROM sales s
    JOIN orders o ON s.order_id = o.id
    JOIN items i ON s.item_id = i.id
    WHERE s.store_id = $1 AND DATE(s.created_at) = CURRENT_DATE
)

SELECT 
    COALESCE(CAST((SELECT today_sales_count FROM TodaySales) AS TEXT), '0') AS sales_today,
    COALESCE(CAST(SUM(o.order_quantity * i.price) AS TEXT), '0') AS total_sales_revenue,
    COUNT(DISTINCT s.customer_id) AS total_customers,
    COALESCE(SUM(o.order_quantity), 0) AS total_items_sold
FROM sales s
LEFT JOIN orders o ON s.order_id = o.id
LEFT JOIN items i ON s.item_id = i.id
WHERE s.store_id = $1
`

type GetStoreMetricsRow struct {
	SalesToday        interface{} `json:"sales_today"`
	TotalSalesRevenue interface{} `json:"total_sales_revenue"`
	TotalCustomers    int64       `json:"total_customers"`
	TotalItemsSold    interface{} `json:"total_items_sold"`
}

func (q *Queries) GetStoreMetrics(ctx context.Context, storeID int64) (GetStoreMetricsRow, error) {
	row := q.db.QueryRowContext(ctx, getStoreMetrics, storeID)
	var i GetStoreMetricsRow
	err := row.Scan(
		&i.SalesToday,
		&i.TotalSalesRevenue,
		&i.TotalCustomers,
		&i.TotalItemsSold,
	)
	return i, err
}

const hasMadePurchase = `-- name: HasMadePurchase :one
SELECT EXISTS(
    SELECT 1 
    FROM sales 
    WHERE customer_id = $1 AND item_id = $2 AND store_id = $3
) AS has_made_purchase
`

type HasMadePurchaseParams struct {
	CustomerID int64 `json:"customer_id"`
	ItemID     int64 `json:"item_id"`
	StoreID    int64 `json:"store_id"`
}

func (q *Queries) HasMadePurchase(ctx context.Context, arg HasMadePurchaseParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasMadePurchase, arg.CustomerID, arg.ItemID, arg.StoreID)
	var has_made_purchase bool
	err := row.Scan(&has_made_purchase)
	return has_made_purchase, err
}

const reduceSalesOverview = `-- name: ReduceSalesOverview :exec
SELECT reduce_sales_overview($1, $2, $3)
`

type ReduceSalesOverviewParams struct {
	StoreID int64 `json:"store_id"`
	ItemID  int64 `json:"item_id"`
	OrderID int64 `json:"order_id"`
}

func (q *Queries) ReduceSalesOverview(ctx context.Context, arg ReduceSalesOverviewParams) error {
	_, err := q.db.ExecContext(ctx, reduceSalesOverview, arg.StoreID, arg.ItemID, arg.OrderID)
	return err
}
