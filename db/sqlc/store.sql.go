// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: store.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createStore = `-- name: CreateStore :one
INSERT INTO stores (
  name,
  description,
  profile_image_url,
  store_account_id,
  category
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, name, description, store_account_id, profile_image_url, is_verified, category, is_frozen, created_at
`

type CreateStoreParams struct {
	Name            string `json:"name"`
	Description     string `json:"description"`
	ProfileImageUrl string `json:"profile_image_url"`
	StoreAccountID  string `json:"store_account_id"`
	Category        string `json:"category"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStore,
		arg.Name,
		arg.Description,
		arg.ProfileImageUrl,
		arg.StoreAccountID,
		arg.Category,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StoreAccountID,
		&i.ProfileImageUrl,
		&i.IsVerified,
		&i.Category,
		&i.IsFrozen,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM stores
WHERE id = $1
`

func (q *Queries) DeleteStore(ctx context.Context, storeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStore, storeID)
	return err
}

const getStoreByID = `-- name: GetStoreByID :one
SELECT 
  s.id, s.name, s.description, s.store_account_id, s.profile_image_url, s.is_verified, s.category, s.is_frozen, s.created_at, 
  json_agg(json_build_object(
      'account_id', u.account_id,
      'profile_img_url', u.profile_image_url,
      'access_levels', so.access_levels,
      'is_original_owner', so.is_primary,
      'added_at', so.added_at
  )) AS store_owners
FROM 
  stores AS s
JOIN 
  store_owners AS so ON s.id = so.store_id
JOIN 
  users AS u ON so.user_id = u.id
WHERE 
  s.id = $1
GROUP BY 
  s.id
`

type GetStoreByIDRow struct {
	ID              int64           `json:"id"`
	Name            string          `json:"name"`
	Description     string          `json:"description"`
	StoreAccountID  string          `json:"store_account_id"`
	ProfileImageUrl string          `json:"profile_image_url"`
	IsVerified      bool            `json:"is_verified"`
	Category        string          `json:"category"`
	IsFrozen        bool            `json:"is_frozen"`
	CreatedAt       time.Time       `json:"created_at"`
	StoreOwners     json.RawMessage `json:"store_owners"`
}

func (q *Queries) GetStoreByID(ctx context.Context, storeID int64) (GetStoreByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getStoreByID, storeID)
	var i GetStoreByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StoreAccountID,
		&i.ProfileImageUrl,
		&i.IsVerified,
		&i.Category,
		&i.IsFrozen,
		&i.CreatedAt,
		&i.StoreOwners,
	)
	return i, err
}

const updateStore = `-- name: UpdateStore :one
UPDATE stores
SET
  name = COALESCE($1, name),
  description = COALESCE($2, description),
  profile_image_url = COALESCE($3, profile_image_url),
  is_verified = COALESCE($4, is_verified),
  category = COALESCE($5, category),
  is_frozen = COALESCE($6, is_frozen)
WHERE 
  id = $7
RETURNING id, name, description, store_account_id, profile_image_url, is_verified, category, is_frozen, created_at
`

type UpdateStoreParams struct {
	Name            sql.NullString `json:"name"`
	Description     sql.NullString `json:"description"`
	ProfileImageUrl sql.NullString `json:"profile_image_url"`
	IsVerified      sql.NullBool   `json:"is_verified"`
	Category        sql.NullString `json:"category"`
	IsFrozen        sql.NullBool   `json:"is_frozen"`
	StoreID         int64          `json:"store_id"`
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, updateStore,
		arg.Name,
		arg.Description,
		arg.ProfileImageUrl,
		arg.IsVerified,
		arg.Category,
		arg.IsFrozen,
		arg.StoreID,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StoreAccountID,
		&i.ProfileImageUrl,
		&i.IsVerified,
		&i.Category,
		&i.IsFrozen,
		&i.CreatedAt,
	)
	return i, err
}
