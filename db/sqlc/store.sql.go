// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: store.sql

package db

import (
	"context"
	"encoding/json"
	"time"
)

const createStore = `-- name: CreateStore :one
INSERT INTO stores (
  name,
  description,
  profile_image_url,
  category
) VALUES (
  $1, $2, $3, $4
) RETURNING id, name, description, profile_image_url, is_verified, category, created_at
`

type CreateStoreParams struct {
	Name            string `json:"name"`
	Description     string `json:"description"`
	ProfileImageUrl string `json:"profile_image_url"`
	Category        string `json:"category"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStore,
		arg.Name,
		arg.Description,
		arg.ProfileImageUrl,
		arg.Category,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ProfileImageUrl,
		&i.IsVerified,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const getStoreByID = `-- name: GetStoreByID :one
SELECT 
  s.id, s.name, s.description, s.profile_image_url, s.is_verified, s.category, s.created_at, 
  json_agg(json_build_object(
      'user', json_build_object('id', u.id, 'first_name', u.first_name, 'last_name', u.last_name, 'email', u.email),
      'store_owners', json_build_object('user_id', so.user_id, 'store_id', so.store_id, 'added_at', so.added_at)
  )) AS owners
FROM 
  stores AS s
JOIN 
  store_owners AS so ON s.id = so.store_id
JOIN 
  users AS u ON so.user_id = u.id
WHERE 
  s.id = $1
GROUP BY 
  s.id
`

type GetStoreByIDRow struct {
	ID              int64           `json:"id"`
	Name            string          `json:"name"`
	Description     string          `json:"description"`
	ProfileImageUrl string          `json:"profile_image_url"`
	IsVerified      bool            `json:"is_verified"`
	Category        string          `json:"category"`
	CreatedAt       time.Time       `json:"created_at"`
	Owners          json.RawMessage `json:"owners"`
}

func (q *Queries) GetStoreByID(ctx context.Context, storeID int64) (GetStoreByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getStoreByID, storeID)
	var i GetStoreByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ProfileImageUrl,
		&i.IsVerified,
		&i.Category,
		&i.CreatedAt,
		&i.Owners,
	)
	return i, err
}
