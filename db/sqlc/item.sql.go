// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: item.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const checkItemStoreMatch = `-- name: CheckItemStoreMatch :one
SELECT supply_quantity from items
WHERE id = $1
  AND store_id = $2
`

type CheckItemStoreMatchParams struct {
	ItemID  int64 `json:"item_id"`
	StoreID int64 `json:"store_id"`
}

func (q *Queries) CheckItemStoreMatch(ctx context.Context, arg CheckItemStoreMatchParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkItemStoreMatch, arg.ItemID, arg.StoreID)
	var supply_quantity int64
	err := row.Scan(&supply_quantity)
	return supply_quantity, err
}

const createStoreItem = `-- name: CreateStoreItem :one
INSERT INTO items (
  name,
  description,
  price,
  store_id,
  image_urls,
  category,
  cover_img_url,
  discount_percentage,
  supply_quantity,
  extra,
  status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, name, description, price, store_id, image_urls, category, discount_percentage, supply_quantity, extra, is_frozen, created_at, updated_at, currency, cover_img_url, status
`

type CreateStoreItemParams struct {
	Name               string          `json:"name"`
	Description        string          `json:"description"`
	Price              string          `json:"price"`
	StoreID            int64           `json:"store_id"`
	ImageUrls          []string        `json:"image_urls"`
	Category           string          `json:"category"`
	CoverImgUrl        string          `json:"cover_img_url"`
	DiscountPercentage string          `json:"discount_percentage"`
	SupplyQuantity     int64           `json:"supply_quantity"`
	Extra              json.RawMessage `json:"extra"`
	Status             string          `json:"status"`
}

func (q *Queries) CreateStoreItem(ctx context.Context, arg CreateStoreItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createStoreItem,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.StoreID,
		pq.Array(arg.ImageUrls),
		arg.Category,
		arg.CoverImgUrl,
		arg.DiscountPercentage,
		arg.SupplyQuantity,
		arg.Extra,
		arg.Status,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.StoreID,
		pq.Array(&i.ImageUrls),
		&i.Category,
		&i.DiscountPercentage,
		&i.SupplyQuantity,
		&i.Extra,
		&i.IsFrozen,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Currency,
		&i.CoverImgUrl,
		&i.Status,
	)
	return i, err
}

const deductItemSupply = `-- name: DeductItemSupply :exec
UPDATE items 
SET 
  supply_quantity = supply_quantity - $1
WHERE
  id = $2 AND supply_quantity >= $1
`

type DeductItemSupplyParams struct {
	OrderQuantity int64 `json:"order_quantity"`
	ItemID        int64 `json:"item_id"`
}

func (q *Queries) DeductItemSupply(ctx context.Context, arg DeductItemSupplyParams) error {
	_, err := q.db.ExecContext(ctx, deductItemSupply, arg.OrderQuantity, arg.ItemID)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE store_id = $1 AND id = $2
`

type DeleteItemParams struct {
	StoreID int64 `json:"store_id"`
	ItemID  int64 `json:"item_id"`
}

func (q *Queries) DeleteItem(ctx context.Context, arg DeleteItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteItem, arg.StoreID, arg.ItemID)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, name, description, price, store_id, image_urls, category, discount_percentage, supply_quantity, extra, is_frozen, created_at, updated_at, currency, cover_img_url, status FROM items
WHERE id = $1 AND supply_quantity > 0
`

func (q *Queries) GetItem(ctx context.Context, itemID int64) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, itemID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.StoreID,
		pq.Array(&i.ImageUrls),
		&i.Category,
		&i.DiscountPercentage,
		&i.SupplyQuantity,
		&i.Extra,
		&i.IsFrozen,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Currency,
		&i.CoverImgUrl,
		&i.Status,
	)
	return i, err
}

const updateItem = `-- name: UpdateItem :one
UPDATE items 
SET 
  description = COALESCE($1, description),
  name = COALESCE($2, name),
  price = COALESCE($3, price),
  image_urls = COALESCE($4, image_urls),
  cover_img_url = COALESCE($5, cover_img_url),
  category = COALESCE($6, category),
  discount_percentage = COALESCE($7, discount_percentage),
  supply_quantity = COALESCE($8, supply_quantity),
  extra = COALESCE($9, extra),
  is_frozen = COALESCE($10, is_frozen),
  status = COALESCE($11, status),
  updated_at = COALESCE($12, updated_at)
WHERE
  id = $13
RETURNING id, name, description, price, store_id, image_urls, category, discount_percentage, supply_quantity, extra, is_frozen, created_at, updated_at, currency, cover_img_url, status
`

type UpdateItemParams struct {
	Description        sql.NullString        `json:"description"`
	Name               sql.NullString        `json:"name"`
	Price              sql.NullString        `json:"price"`
	ImageUrls          []string              `json:"image_urls"`
	CoverImgUrl        sql.NullString        `json:"cover_img_url"`
	Category           sql.NullString        `json:"category"`
	DiscountPercentage sql.NullString        `json:"discount_percentage"`
	SupplyQuantity     sql.NullInt64         `json:"supply_quantity"`
	Extra              pqtype.NullRawMessage `json:"extra"`
	IsFrozen           sql.NullBool          `json:"is_frozen"`
	Status             sql.NullString        `json:"status"`
	UpdatedAt          sql.NullTime          `json:"updated_at"`
	ItemID             int64                 `json:"item_id"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItem,
		arg.Description,
		arg.Name,
		arg.Price,
		pq.Array(arg.ImageUrls),
		arg.CoverImgUrl,
		arg.Category,
		arg.DiscountPercentage,
		arg.SupplyQuantity,
		arg.Extra,
		arg.IsFrozen,
		arg.Status,
		arg.UpdatedAt,
		arg.ItemID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.StoreID,
		pq.Array(&i.ImageUrls),
		&i.Category,
		&i.DiscountPercentage,
		&i.SupplyQuantity,
		&i.Extra,
		&i.IsFrozen,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Currency,
		&i.CoverImgUrl,
		&i.Status,
	)
	return i, err
}
