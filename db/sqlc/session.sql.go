// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkSessionExistence = `-- name: CheckSessionExistence :one
SELECT EXISTS(SELECT 1 FROM sessions WHERE token = $1) AS session_exists
`

func (q *Queries) CheckSessionExistence(ctx context.Context, token string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkSessionExistence, token)
	var session_exists bool
	err := row.Scan(&session_exists)
	return session_exists, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id,
  user_id,
  token,
  scope,
  user_agent,
  client_ip,
  is_blocked,
  expires_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, user_id, token, scope, user_agent, client_ip, is_blocked, expires_at, created_at
`

type CreateSessionParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    int64     `json:"user_id"`
	Token     string    `json:"token"`
	Scope     string    `json:"scope"`
	UserAgent string    `json:"user_agent"`
	ClientIp  string    `json:"client_ip"`
	IsBlocked bool      `json:"is_blocked"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.Scope,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Scope,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredSession = `-- name: DeleteExpiredSession :exec
SELECT delete_expired_sessions()
`

func (q *Queries) DeleteExpiredSession(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSession)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, token, scope, user_agent, client_ip, is_blocked, expires_at, created_at FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Scope,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
