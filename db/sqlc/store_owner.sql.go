// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: store_owner.sql

package db

import (
	"context"
)

const createStoreOwner = `-- name: CreateStoreOwner :one
INSERT INTO store_owners (
  user_id,
  store_id,
  access_level
) VALUES (
  $1, $2, $3
) RETURNING user_id, store_id, access_level, added_at
`

type CreateStoreOwnerParams struct {
	UserID      int64 `json:"user_id"`
	StoreID     int64 `json:"store_id"`
	AccessLevel int16 `json:"access_level"`
}

func (q *Queries) CreateStoreOwner(ctx context.Context, arg CreateStoreOwnerParams) (StoreOwner, error) {
	row := q.db.QueryRowContext(ctx, createStoreOwner, arg.UserID, arg.StoreID, arg.AccessLevel)
	var i StoreOwner
	err := row.Scan(
		&i.UserID,
		&i.StoreID,
		&i.AccessLevel,
		&i.AddedAt,
	)
	return i, err
}

const deleteStoreOwner = `-- name: DeleteStoreOwner :exec
DELETE FROM store_owners
WHERE user_id = $1 AND store_id = $2
`

type DeleteStoreOwnerParams struct {
	UserID  int64 `json:"user_id"`
	StoreID int64 `json:"store_id"`
}

func (q *Queries) DeleteStoreOwner(ctx context.Context, arg DeleteStoreOwnerParams) error {
	_, err := q.db.ExecContext(ctx, deleteStoreOwner, arg.UserID, arg.StoreID)
	return err
}

const isStoreOwner = `-- name: IsStoreOwner :one
SELECT access_level
FROM store_owners
WHERE user_id = $1
  AND store_id = $2
`

type IsStoreOwnerParams struct {
	UserID  int64 `json:"user_id"`
	StoreID int64 `json:"store_id"`
}

func (q *Queries) IsStoreOwner(ctx context.Context, arg IsStoreOwnerParams) (int16, error) {
	row := q.db.QueryRowContext(ctx, isStoreOwner, arg.UserID, arg.StoreID)
	var access_level int16
	err := row.Scan(&access_level)
	return access_level, err
}
